<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:avalonDock="clr-namespace:Xceed.Wpf.AvalonDock;assembly=Xceed.Wpf.AvalonDock"
                    xmlns:avalonDockControls="clr-namespace:Xceed.Wpf.AvalonDock.Controls;assembly=Xceed.Wpf.AvalonDock"
                    xmlns:avalonDockConverters="clr-namespace:Xceed.Wpf.AvalonDock.Converters;assembly=Xceed.Wpf.AvalonDock"
                    xmlns:avalonDockProperties="clr-namespace:Xceed.Wpf.AvalonDock.Properties;assembly=Xceed.Wpf.AvalonDock"
                    xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=Xceed.Wpf.AvalonDock">

    <avalonDockConverters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <avalonDockConverters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />
    <avalonDockConverters:AnchorSideToOrientationConverter x:Key="AnchorSideToOrientationConverter" />
    <avalonDockConverters:AnchorSideToAngleConverter x:Key="AnchorSideToAngleConverter" />
    <avalonDockConverters:NullToDoNothingConverter x:Key="NullToDoNothingConverter" />
    <avalonDockConverters:LayoutItemFromLayoutModelConverter x:Key="LayoutItemFromLayoutModelConverter" />
    <avalonDockConverters:ActivateCommandLayoutItemFromLayoutModelConverter x:Key="ActivateCommandLayoutItemFromLayoutModelConverter" />

    <!--
        ToggleButton
    -->
    <Style x:Key="AvalonDockMetroToolButtonStyle" TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource AccentColorBrush2}" />
                <Setter Property="BorderBrush" Value="{DynamicResource HighlightBrush}" />
                <!--<Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeMetro_BaseColor31}" />
                <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeMetro_BaseColor10}" />-->
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource HighlightBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource IdealForegroundColorBrush}" />
                <!--<Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeMetro_BaseColor31}" />
                <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeMetro_BaseColor10}" />-->
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        Button
    -->
    <Style x:Key="AvalonDockMetroButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource AccentColorBrush2}" />
                <Setter Property="BorderBrush" Value="{DynamicResource HighlightBrush}" />
                <!--<Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeMetro_BaseColor31}" />
                <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeMetro_BaseColor10}" />-->
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource HighlightBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource IdealForegroundColorBrush}" />
                <!--<Setter Property="BorderBrush" Value="{DynamicResource AvalonDock_ThemeMetro_BaseColor31}" />
                <Setter Property="Background" Value="{DynamicResource AvalonDock_ThemeMetro_BaseColor10}" />-->
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        LayoutDocumentPaneControl
    -->
    <Style x:Key="AvalonDockMetroDocumentPaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
                    <Grid ClipToBounds="true"
                          KeyboardNavigation.TabNavigation="Local"
                          SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <!--  Following border is required to catch mouse events  -->
                        <Border Grid.RowSpan="2" Background="Transparent" />
                        <Grid Grid.Row="0"
                              Panel.ZIndex="1"
                              Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                  AncestorType={x:Type avalonDockControls:LayoutDocumentPaneControl}},
                                                   Path=Model.ShowHeader,
                                                   Converter={StaticResource BoolToVisibilityConverter}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Border x:Name="BD"
                                    Grid.ColumnSpan="2"
                                    BorderBrush="{DynamicResource ControlBorderBrush}"
                                    BorderThickness="0,0,0,2" />
                            <avalonDockControls:DropDownButton x:Name="MenuDropDownButton"
                                                               Grid.Column="1"
                                                               VerticalAlignment="Center"
                                                               Focusable="False"
                                                               Style="{StaticResource AvalonDockMetroToolButtonStyle}">
                                <avalonDockControls:DropDownButton.DropDownContextMenu>
                                    <avalonDockControls:ContextMenuEx ItemsSource="{Binding Model.ChildrenSorted, RelativeSource={RelativeSource TemplatedParent}}">
                                        <avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                            <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="{x:Type avalonDockControls:MenuItemEx}">
                                                <Setter Property="HeaderTemplate" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplate}" />
                                                <Setter Property="HeaderTemplateSelector" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}" />
                                                <Setter Property="IconTemplate" Value="{Binding Path=Root.Manager.IconContentTemplate}" />
                                                <Setter Property="IconTemplateSelector" Value="{Binding Path=Root.Manager.IconContentTemplateSelector}" />
                                                <Setter Property="Command" Value="{Binding Path=., Converter={StaticResource ActivateCommandLayoutItemFromLayoutModelConverter}}" />
                                            </Style>
                                        </avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                    </avalonDockControls:ContextMenuEx>
                                </avalonDockControls:DropDownButton.DropDownContextMenu>
                                <!--<Rectangle x:Name="MenuDropDownButtonImage"
                                           Width="12"
                                           Height="12"
                                           Fill="{DynamicResource AvalonDockThemeVs2013DocumentWellOverflowButtonDefaultGlyph}">
                                    <Rectangle.OpacityMask>
                                        <ImageBrush ImageSource="Images/PinDocMenu.png" />
                                    </Rectangle.OpacityMask>
                                </Rectangle>-->
                                <Grid Margin="4">
                                    <Path x:Name="MenuDropDownButtonImage"
                                          Width="10"
                                          Height="10"
                                          Margin="0"
                                          Data="M3,10.999999L29,10.999999 16.264038,25.664z M0,0L32,0 32,3.9999999 0,3.9999999z"
                                          Fill="{DynamicResource IdealForegroundColorBrush}"
                                          RenderTransformOrigin="0.5,0.5"
                                          Stretch="Uniform" />
                                </Grid>
                            </avalonDockControls:DropDownButton>
                            <avalonDockControls:DocumentPaneTabPanel x:Name="HeaderPanel"
                                                                     Grid.Row="0"
                                                                     Grid.Column="0"
                                                                     Margin="0"
                                                                     IsItemsHost="true"
                                                                     KeyboardNavigation.TabIndex="1" />
                        </Grid>
                        <Border x:Name="ContentPanel"
                                Grid.Row="1"
                                Grid.Column="0"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{DynamicResource ControlBorderBrush}"
                                BorderThickness="1,0,1,1"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Cycle"
                                Padding="0">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              Margin="0"
                                              ContentSource="SelectedContent"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger SourceName="MenuDropDownButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="MenuDropDownButton" Property="Background" Value="{DynamicResource AvalonDockThemeVs2013DocumentWellOverflowButtonHoveredBackground}" />
                            <Setter TargetName="MenuDropDownButton" Property="BorderBrush" Value="{DynamicResource AvalonDockThemeVs2013DocumentWellOverflowButtonHoveredBorder}" />
                            <Setter TargetName="MenuDropDownButtonImage" Property="Fill" Value="{DynamicResource AvalonDockThemeVs2013DocumentWellOverflowButtonHoveredGlyph}" />
                        </Trigger>

                        <Trigger SourceName="MenuDropDownButton" Property="IsChecked" Value="True">
                            <Setter TargetName="MenuDropDownButton" Property="Background" Value="{DynamicResource AvalonDockThemeVs2013DocumentWellOverflowButtonPressedBackground}" />
                            <Setter TargetName="MenuDropDownButton" Property="BorderBrush" Value="{DynamicResource AvalonDockThemeVs2013DocumentWellOverflowButtonPressedBorder}" />
                            <Setter TargetName="MenuDropDownButtonImage" Property="Fill" Value="{DynamicResource AvalonDockThemeVs2013DocumentWellOverflowButtonPressedGlyph}" />
                        </Trigger>-->

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsActive}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BD" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </MultiDataTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Model.ChildrenCount}" Value="0">
                            <Setter TargetName="BD" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="ContentPanel" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="MenuDropDownButton" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentTabItem Model="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentControl Model="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  AnchorablePaneControlStyle  -->
    <Style x:Key="AvalonDockMetroAnchorablePaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorablePaneControl}">
        <Setter Property="TabStripPlacement" Value="Bottom" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorablePaneControl}">
                    <Grid ClipToBounds="true"
                          KeyboardNavigation.TabNavigation="Local"
                          SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <!--  Following border is required to catch mouse events  -->
                        <Border Grid.RowSpan="2" Background="Transparent" />
                        <Border x:Name="ContentPanel"
                                Grid.Row="0"
                                Grid.Column="0"
                                Margin="0"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{DynamicResource AccentColorBrush4}"
                                BorderThickness="1"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Cycle">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              Margin="{TemplateBinding Padding}"
                                              ContentSource="SelectedContent"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <avalonDockControls:AnchorablePaneTabPanel x:Name="HeaderPanel"
                                                                   Grid.Row="1"
                                                                   Margin="0"
                                                                   Panel.ZIndex="1"
                                                                   IsItemsHost="true"
                                                                   KeyboardNavigation.TabIndex="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                    <Setter Property="Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    <Setter Property="ToolTip" Value="{Binding ToolTip}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid SnapsToDevicePixels="true">
                                    <Border x:Name="SelectedBD"
                                            Margin="1,-1,1,0"
                                            BorderBrush="{DynamicResource ControlBackgroundBrush}"
                                            BorderThickness="0,1,0,0"
                                            Visibility="Collapsed" />
                                    <Border x:Name="Bd"
                                            Margin="0"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{DynamicResource ControlBorderBrush}"
                                            BorderThickness="0">
                                        <ContentPresenter x:Name="Content"
                                                          Margin="6,2"
                                                          HorizontalAlignment="{Binding HorizontalContentAlignment,
                                                                                        RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                                          VerticalAlignment="{Binding VerticalContentAlignment,
                                                                                      RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                                          ContentSource="Header"
                                                          RecognizesAccessKey="True"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Selector.IsSelected" Value="true">
                                        <Setter TargetName="SelectedBD" Property="Visibility" Value="Visible" />
                                        <Setter TargetName="Bd" Property="BorderThickness" Value="1,0,1,1" />
                                        <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
                                        <Setter Property="Panel.ZIndex" Value="1" />
                                    </Trigger>

                                    <!--  Tool Window : Tab / Selected, active  -->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsSelected}" Value="True" />
                                            <Condition Binding="{Binding IsActive}" Value="True" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
                                        <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
                                        <Setter Property="FontWeight" Value="SemiBold" />
                                    </MultiDataTrigger>

                                    <!--  Tool Window : Tab / Selected, inactive  -->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsSelected}" Value="True" />
                                            <Condition Binding="{Binding IsActive}" Value="False" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
                                        <Setter Property="Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
                                    </MultiDataTrigger>

                                    <!--  Tool Window : Tab / Unselected, hovered  -->
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="true" />
                                            <Condition Property="Selector.IsSelected" Value="false" />
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush4}" />
                                        <Setter Property="Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
                                        <Setter Property="Panel.ZIndex" Value="0" />
                                    </MultiTrigger>

                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutAnchorableTabItem Model="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutAnchorableControl Model="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        AnchorablePaneTitle
    -->
    <Style TargetType="avalonDockControls:AnchorablePaneTitle">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Margin="2,3">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}" DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                                <ContentPresenter x:Name="Header"
                                                  Margin="2,0,0,0"
                                                  Content="{Binding Model,
                                                                    RelativeSource={RelativeSource TemplatedParent}}"
                                                  ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate,
                                                                            RelativeSource={RelativeSource TemplatedParent}}"
                                                  ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector,
                                                                                    RelativeSource={RelativeSource TemplatedParent}}"
                                                  TextElement.Foreground="{TemplateBinding Foreground}" />
                            </avalonDockControls:DropDownControlArea>

                            <Rectangle x:Name="DragHandleGeometryPlaceholder"
                                       Grid.Column="1"
                                       Fill="{DynamicResource IdealForegroundColorBrush}"
                                       Visibility="Collapsed" />
                            <Rectangle x:Name="DragHandleTexture"
                                       Grid.Column="1"
                                       Height="5"
                                       Margin="8,0,4,0"
                                       VerticalAlignment="Center">
                                <Rectangle.Fill>
                                    <DrawingBrush TileMode="Tile"
                                                  Viewbox="0,0,4,5"
                                                  ViewboxUnits="Absolute"
                                                  Viewport="0,0,4,5"
                                                  ViewportUnits="Absolute">
                                        <DrawingBrush.Drawing>
                                            <GeometryDrawing Brush="{Binding Fill, ElementName=DragHandleGeometryPlaceholder, Mode=OneWay, Converter={StaticResource NullToDoNothingConverter}}">
                                                <GeometryDrawing.Geometry>
                                                    <GeometryGroup>
                                                        <GeometryGroup.Children>
                                                            <RectangleGeometry Rect="0,0,1,1" />
                                                            <RectangleGeometry Rect="0,4,1,1" />
                                                            <RectangleGeometry Rect="2,2,1,1" />
                                                        </GeometryGroup.Children>
                                                    </GeometryGroup>
                                                </GeometryDrawing.Geometry>
                                            </GeometryDrawing>
                                        </DrawingBrush.Drawing>
                                    </DrawingBrush>
                                </Rectangle.Fill>
                            </Rectangle>

                            <avalonDockControls:DropDownButton x:Name="MenuDropDownButton"
                                                               Grid.Column="2"
                                                               VerticalAlignment="Center"
                                                               DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu,
                                                                                             RelativeSource={RelativeSource TemplatedParent}}"
                                                               DropDownContextMenuDataContext="{Binding Path=LayoutItem,
                                                                                                        RelativeSource={RelativeSource TemplatedParent}}"
                                                               Focusable="False"
                                                               Style="{StaticResource AvalonDockMetroToolButtonStyle}"
                                                               ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}">
                                <!--<Rectangle x:Name="PART_ImgMenuPin"
                                           Width="10"
                                           Height="10"
                                           Margin="4"
                                           Fill="{DynamicResource IdealForegroundColorBrush}">
                                    <Rectangle.OpacityMask>
                                        <VisualBrush Visual="{StaticResource appbar_arrow_down2}" />
                                    </Rectangle.OpacityMask>
                                </Rectangle>-->
                                <Grid Margin="5">
                                    <Path x:Name="PART_ImgMenuPin"
                                          Width="10"
                                          Height="10"
                                          Margin="0"
                                          Data="M32,0L32,8.4920026 21.291016,17.120999 21.200989,17.195005 21.247009,17.232999 15.978027,21.478999 10.708008,17.232999 0,8.6020032 0,0.11100769 12.151001,9.904997 15.93103,12.947995 16.020996,12.874997 19.846008,9.7920056z"
                                          Fill="{DynamicResource IdealForegroundColorBrush}"
                                          RenderTransformOrigin="0.5,0.5"
                                          Stretch="Uniform" />
                                </Grid>
                            </avalonDockControls:DropDownButton>

                            <Button x:Name="PART_AutoHidePin"
                                    Grid.Column="3"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Command="{Binding Path=LayoutItem.AutoHideCommand,
                                                      RelativeSource={RelativeSource TemplatedParent}}"
                                    Focusable="False"
                                    Style="{StaticResource AvalonDockMetroButtonStyle}"
                                    ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}"
                                    Visibility="{Binding Path=IsEnabled,
                                                         RelativeSource={RelativeSource Self},
                                                         Mode=OneWay,
                                                         Converter={StaticResource BoolToVisibilityConverter}}">
                                <!--<Rectangle x:Name="PART_ImgAutoHidePin"
                                           Width="10"
                                           Height="10"
                                           Margin="4"
                                           Fill="{DynamicResource IdealForegroundColorBrush}">
                                    <Rectangle.OpacityMask>
                                        <VisualBrush Visual="{StaticResource appbar_pin2}" />
                                    </Rectangle.OpacityMask>
                                </Rectangle>-->
                                <Grid Margin="4">
                                    <Path x:Name="PART_ImgAutoHidePin"
                                          Width="12"
                                          Height="12"
                                          Margin="0"
                                          Data="M16.833997,0L14.443011,4.8720093 14.504962,12.14502 16.928966,12.127991 19.396001,16.953979 12.118983,17.018005 12.141993,19.437988 9.8739941,32 7.2920315,19.47998 7.2759797,17.054016 0,17.114014 2.3820119,12.247986 4.8080303,12.224976 4.7480328,4.9520264 2.2820363,0.11999512z"
                                          Fill="{DynamicResource IdealForegroundColorBrush}"
                                          RenderTransformOrigin="0.5,0.5"
                                          Stretch="Uniform" />
                                </Grid>
                            </Button>
                            <Button x:Name="PART_HidePin"
                                    Grid.Column="4"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Command="{Binding Path=LayoutItem.HideCommand,
                                                      RelativeSource={RelativeSource TemplatedParent}}"
                                    Focusable="False"
                                    Style="{StaticResource AvalonDockMetroButtonStyle}"
                                    ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                                    Visibility="{Binding Path=IsEnabled,
                                                         RelativeSource={RelativeSource Self},
                                                         Mode=OneWay,
                                                         Converter={StaticResource BoolToVisibilityConverter}}">
                                <!--<Rectangle x:Name="PART_ImgHidePin"
                                           Width="10"
                                           Height="10"
                                           Margin="4"
                                           Fill="{DynamicResource IdealForegroundColorBrush}">
                                    <Rectangle.OpacityMask>
                                        <VisualBrush Visual="{StaticResource appbar_close}" />
                                    </Rectangle.OpacityMask>
                                </Rectangle>-->
                                <Grid Margin="5">
                                    <Path x:Name="PART_ImgHidePin"
                                          Width="10"
                                          Height="10"
                                          Margin="0"
                                          Data="M2.999979,0C3.8000264,0,4.4999763,0.30000305,5.1000115,0.90000927L15.999954,11.700012 26.899959,0.90000927C28.099967,-0.29998779 29.999927,-0.29998779 31.099961,0.90000927 32.299972,2.1000061 32.299972,4 31.099961,5.1000061L20.199958,16 31.099961,26.900009C32.299972,28.100006 32.299972,30 31.099961,31.100006 29.899951,32.300003 27.999931,32.300003 26.899959,31.100006L15.999954,20.200012 5.1000115,31.100006C3.9000017,32.300003 1.9999809,32.300003 0.90000743,31.100006 -0.30000248,29.900009 -0.30000248,28 0.90000743,26.900009L11.800011,16 0.90000743,5.1000061C-0.30000248,3.9000092 -0.30000248,2 0.90000743,0.90000927 1.4999818,0.30000305 2.1999928,0 2.999979,0z"
                                          Fill="{DynamicResource IdealForegroundColorBrush}"
                                          RenderTransformOrigin="0.5,0.5"
                                          Stretch="Uniform" />
                                </Grid>
                            </Button>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Model.IsAutoHidden, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter TargetName="PART_AutoHidePin" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>

                        <!--  Tool Window : Caption / Active  -->
                        <DataTrigger Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
                            <Setter TargetName="DragHandleGeometryPlaceholder" Property="Fill" Value="{DynamicResource IdealForegroundColorBrush}" />
                        </DataTrigger>

                        <!--  Tool Window : Caption : Button / Active  -->
                        <DataTrigger Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter TargetName="PART_ImgMenuPin" Property="Fill" Value="{DynamicResource IdealForegroundColorBrush}" />
                            <Setter TargetName="PART_ImgAutoHidePin" Property="Fill" Value="{DynamicResource IdealForegroundColorBrush}" />
                            <Setter TargetName="PART_ImgHidePin" Property="Fill" Value="{DynamicResource IdealForegroundColorBrush}" />
                        </DataTrigger>

                        <!--  Tool Window : Caption : Button / Active, hovered  -->
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=MenuDropDownButton}" Value="True" />
                                <Condition Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MenuDropDownButton" Property="Background" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActiveHoveredBackground}" />
                            <Setter TargetName="MenuDropDownButton" Property="BorderBrush" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActiveHoveredBorder}" />
                            <Setter TargetName="PART_ImgMenuPin" Property="Fill" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActiveHoveredGlyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_AutoHidePin}" Value="True" />
                                <Condition Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_AutoHidePin" Property="Background" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActiveHoveredBackground}" />
                            <Setter TargetName="PART_AutoHidePin" Property="BorderBrush" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActiveHoveredBorder}" />
                            <Setter TargetName="PART_ImgAutoHidePin" Property="Fill" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActiveHoveredGlyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_HidePin}" Value="True" />
                                <Condition Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HidePin" Property="Background" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActiveHoveredBackground}" />
                            <Setter TargetName="PART_HidePin" Property="BorderBrush" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActiveHoveredBorder}" />
                            <Setter TargetName="PART_ImgHidePin" Property="Fill" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActiveHoveredGlyph}" />
                        </MultiDataTrigger>-->

                        <!--  Tool Window : Caption : Button / Inactive, hovered  -->
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=MenuDropDownButton}" Value="True" />
                                <Condition Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MenuDropDownButton" Property="Background" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonInactiveHoveredBackground}" />
                            <Setter TargetName="MenuDropDownButton" Property="BorderBrush" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonInactiveHoveredBorder}" />
                            <Setter TargetName="PART_ImgMenuPin" Property="Fill" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonInactiveHoveredGlyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_AutoHidePin}" Value="True" />
                                <Condition Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_AutoHidePin" Property="Background" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonInactiveHoveredBackground}" />
                            <Setter TargetName="PART_AutoHidePin" Property="BorderBrush" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonInactiveHoveredBorder}" />
                            <Setter TargetName="PART_ImgAutoHidePin" Property="Fill" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonInactiveHoveredGlyph}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_HidePin}" Value="True" />
                                <Condition Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HidePin" Property="Background" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonInactiveHoveredBackground}" />
                            <Setter TargetName="PART_HidePin" Property="BorderBrush" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonInactiveHoveredBorder}" />
                            <Setter TargetName="PART_ImgHidePin" Property="Fill" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonInactiveHoveredGlyph}" />
                        </MultiDataTrigger>-->

                        <!--  Tool Window : Caption : Button / Active / Inactive, pressed  -->
                        <!--<Trigger SourceName="MenuDropDownButton" Property="IsChecked" Value="True">
                            <Setter TargetName="MenuDropDownButton" Property="Background" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActivePressedBackground}" />
                            <Setter TargetName="MenuDropDownButton" Property="BorderBrush" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActivePressedBorder}" />
                            <Setter TargetName="PART_ImgMenuPin" Property="Fill" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActivePressedGlyph}" />
                        </Trigger>
                        <Trigger SourceName="PART_AutoHidePin" Property="IsMouseCaptured" Value="True">
                            <Setter TargetName="PART_AutoHidePin" Property="Background" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActivePressedBackground}" />
                            <Setter TargetName="PART_AutoHidePin" Property="BorderBrush" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActivePressedBorder}" />
                            <Setter TargetName="PART_ImgAutoHidePin" Property="Fill" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActivePressedGlyph}" />
                        </Trigger>
                        <Trigger SourceName="PART_HidePin" Property="IsMouseCaptured" Value="True">
                            <Setter TargetName="PART_HidePin" Property="Background" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActivePressedBackground}" />
                            <Setter TargetName="PART_HidePin" Property="BorderBrush" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActivePressedBorder}" />
                            <Setter TargetName="PART_ImgHidePin" Property="Fill" Value="{DynamicResource AvalonDockThemeVs2013ToolWindowCaptionButtonActivePressedGlyph}" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        LayoutAnchorableControl
    -->
    <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border x:Name="Header">
                                <avalonDockControls:AnchorablePaneTitle Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Border>
                            <ContentPresenter Grid.Row="1"
                                              Content="{Binding LayoutItem.View,
                                                                RelativeSource={RelativeSource TemplatedParent}}"
                                              FlowDirection="{TemplateBinding FlowDirection}" />

                            <!--
                                <ContentPresenter
                                Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                Grid.Row="1"/>
                            -->
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.IsFloating}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.Parent.IsDirectlyHostedInFloatingWindow}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  DockingManager  -->
    <Style x:Key="{x:Type avalonDock:DockingManager}" TargetType="{x:Type avalonDock:DockingManager}">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="DocumentPaneControlStyle" Value="{StaticResource AvalonDockMetroDocumentPaneControlStyle}" />
        <Setter Property="AnchorablePaneControlStyle" Value="{StaticResource AvalonDockMetroAnchorablePaneControlStyle}" />
    </Style>

</ResourceDictionary>